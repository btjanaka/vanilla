<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://btjanaka.net/feed.xml" rel="self" type="application/atom+xml"/><link href="https://btjanaka.net/" rel="alternate" type="text/html" hreflang="en"/><updated>2021-02-20T01:56:04-08:00</updated><id>https://btjanaka.net/feed.xml</id><title type="html">Bryon Tjanaka</title><subtitle>Personal website of Bryon Tjanaka</subtitle><author><name>Bryon Tjanaka</name><email>bryon@btjanaka.net</email></author><entry><title type="html">Finding An Internship at Google</title><link href="https://btjanaka.net/blog/finding-an-internship.html" rel="alternate" type="text/html" title="Finding An Internship at Google"/><published>2020-06-26T22:00:00-07:00</published><updated>2020-06-26T22:00:00-07:00</updated><id>https://btjanaka.net/blog/finding-an-internship</id><content type="html" xml:base="https://btjanaka.net/blog/finding-an-internship.html">&lt;p&gt;As someone who has interned three times at Google, I have been asked several times for advice on finding an internship.&lt;!--excerpt-separator--&gt; To avoid repeating myself, I figured I would compile my tips into this blog post. Without further ado, here they are.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Recognize what you’re applying to.&lt;/strong&gt; At a company like Google, you won’t be running around grabbing coffee. Rather, you’ll be working next to engineers on real projects. The same goes for other roles like BOLD (the business internship) and APM (the product manager internship).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;You’re never going to feel ready.&lt;/strong&gt; Most of the time, you’re probably going to feel that you still do not have “enough” skills, or that all your peers are somehow “ahead” of you. Don’t be your own worst enemy – just apply!&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Talk to as many people as you can.&lt;/strong&gt; Everyone has something to share, and by listening to their advice, you will be able to distill the bits that are important to your specific case.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Get your resume reviewed.&lt;/strong&gt; Pass your resume around to your friends and/or visit the career center at your school (such as the &lt;a href=&quot;https://career.uci.edu&quot;&gt;Division of Career Pathways&lt;/a&gt; at UCI) to get it reviewed.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Practice for the interview.&lt;/strong&gt; This should go without saying, but when it comes time for the interview, you need to make sure that technical skills are not the issue. Use websites such as &lt;a href=&quot;https://leetcode.com/problemset/all/&quot;&gt;LeetCode&lt;/a&gt; and &lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;HackerRank&lt;/a&gt; to hone your skills, and practice coding on a Google doc while being mock-interviewed by a friend on the phone (intern interviews tend to be phone interviews). There’s plenty of other interview tips scattered throughout the web; just do a Google search :wink:.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Pay attention to networking opportunities.&lt;/strong&gt; Companies will often partner with student organizations to host information sessions about their company. These are a great way to learn the nuances of the application process and (potentially) give your resume to a recruiter. Career fairs are another opportunity to meet recruiters, though the lines are often very long. Finally, attending conferences like the &lt;a href=&quot;https://ghc.anitab.org&quot;&gt;Grace Hopper Celebration&lt;/a&gt; (for women) can greatly enhance your chances of getting an internship.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Ask for referrrals.&lt;/strong&gt; If there are any Google employees in your network, even current interns, make sure to ask if they would be willing to refer you. Keep in mind that the better someone knows you, the more genuine their referral will be.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Don’t give up!&lt;/strong&gt; You might not get in on your first attempt, so keep on trying.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;It’s a lot easier to go back once you get in.&lt;/strong&gt; This is more of a statement than a tip, but after interning at Google once, it is relatively easy to return as an intern. I interned as an EP (now known as STEP) intern in my first year, and returned twice as a SWE intern.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Keep in mind that Google is not necessarily the end of the line.&lt;/strong&gt; As many will tell you, &lt;a href=&quot;https://www.businessinsider.com/average-employee-tenure-retention-at-top-tech-companies-2018-4?op=1#at-facebook-a-25-year-stint-is-the-average-5&quot;&gt;the average employee tenure at Google is only 3.2 years&lt;/a&gt;. Personally, I find this statistic hard to believe, as so many of the people I have met at Google have been around for much longer – the article does not mention it, but maybe they include interns in the calculations? Regardless, the point is the same: Google is great, but for many, it is just one step in a long journey.&lt;/li&gt; &lt;/ol&gt;</content><author><name>Bryon Tjanaka</name><email>bryon@btjanaka.net</email></author><category term="Advice"/><summary type="html">As someone who has interned three times at Google, I have been asked several times for advice on finding an internship.</summary></entry><entry><title type="html">Applying to Grad School</title><link href="https://btjanaka.net/blog/applying-grad-school.html" rel="alternate" type="text/html" title="Applying to Grad School"/><published>2020-06-25T11:00:00-07:00</published><updated>2020-06-25T11:00:00-07:00</updated><id>https://btjanaka.net/blog/applying-grad-school</id><content type="html" xml:base="https://btjanaka.net/blog/applying-grad-school.html">&lt;p&gt;Having applied to CS PhD programs over the past year or so, I decided to write down a few lessons I learned.&lt;!--excerpt-separator--&gt; To begin, I will talk about my overall experience. The summer after high school (2017), I took the GRE, as I knew I wanted to pursue some kind of graduate education, and the GRE was not much of a stretch after the SAT and ACT. Then, around March or April of last year (2019), I began talking to various professors about what grad school entailed, and whether it would be a good fit for me. Eventually, I decided to pursue a PhD, so I began applying to the &lt;a href=&quot;https://nsfgrfp.org&quot;&gt;NSF GRFP&lt;/a&gt; (a fellowship for grad students) around May. Then in fall (October/November), I began applying to CS PhD programs. Ultimately, I applied to nine grad schools and was accepted into two. Eventually, I chose to go to USC. With that said, below is a list of things I learned. Some items come from first-hand experience, while others were passed along to me.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Figure out what you’re getting yourself into.&lt;/strong&gt; Grad school is no small undertaking. Basically, you’ll be spending up to 6 years (hopefully not more) working full-time as a researcher in your advisor’s lab. Unlike in undergraduate, courses will be secondary; i.e. you’ll have to take a few, but they will mostly be aimed at supplementing your research. In short, grad school is more like a job than “school.” One article I found particularly helpful in understanding grad school was &lt;a href=&quot;https://stefanosnikolaidis.blogspot.com/2018/12/7-rules-of-grad-school-game.html&quot;&gt;this blog post&lt;/a&gt; from my advisor at USC. &lt;ul&gt; &lt;li&gt;Some folks have asked whether they should do a master’s before / instead of a PhD. My general impression is that master’s degrees are more focused on coursework, though many programs do involve writing a thesis. In general, if you want to pursue a career in research, PhD is the way to go. A PhD is essentially full-time research, and many PhD programs allow you to petition for a master’s anyway (e.g. USC lets you grab a master’s after you finish the PhD coursework). Furthermore, PhD programs are typically funded, while master’s programs can get pretty expensive. If you are thinking of going into a master’s and then PhD, keep in mind that a master’s is not required to pursue a PhD (i.e. you can go straight from undergrad to PhD), and a master’s will not necessarily take time off your PhD.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Talk to as many people as possible.&lt;/strong&gt; Get advice from lots of people when you are trying to figure out the program and school to which you should apply. Anyone familiar with a PhD (especially professors and other folks who have done one) can help you decide 1) whether you actually want a PhD (hint: it’s not for everybody) and 2) what you would study during it. Keep in mind that during all this, you will receive many viewpoints, some conflicting with each other. It is up to you to distill the information that is helpful for your situation. Side note: there are tons of online articles with PhD advice (such as this one :wink:). I also found these helpful, but only for figuring out the basics.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Figure out an area in which to specialize.&lt;/strong&gt; You should be going into a PhD program with a general idea of what problems you want to work on. This will help you decide which professors you want to work with, as well as what you write in your various application materials. Certainly, this will require some soul searching – read some papers, think about your history, and figure out what you want to work on next. Choosing an interest is important because, even within a specific field, there is still a tremendous amount of knowledge to learn.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Choose the professor(s), not just the school.&lt;/strong&gt; Grad school is all about the professor and the people, since you are basically picking your boss and coworkers for the next several years. Thus, as you select schools, make sure you are looking through professors’ publications/websites and finding ones who interest you. You may also want to check whether the school has multiple professors working in your field of interest, as having a community of like-minded researchers can be beneficial. To this end, &lt;a href=&quot;http://csrankings.org&quot;&gt;CS rankings&lt;/a&gt; is a great website for finding prominent schools and professors in your field of interest.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Aim for a young professor.&lt;/strong&gt; Someone who is early in their career, such as an assistant professor, will have more time to work with you, and they will need to ensure the success of their students so that they can obtain tenure. Older professors will of course be enthusiastic about working with you, but they may also be bogged down by administrative or other responsibilities that prevent them from spending as much time with students.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Email professors who you may be interested in working with.&lt;/strong&gt; If you are genuinely interested in working with certain professors, spend some time to compose an email asking about their recent research. Importantly, &lt;strong&gt;do not&lt;/strong&gt; go around asking professors if they will accept you, but &lt;strong&gt;do&lt;/strong&gt; ask if they are accepting students for their lab. If a professor is not taking any students, your application will be wasted. For those afraid to cold-email professors, I can only say that the worst that can happen is that you get ignored. As a disclaimer, I did not email too many professors, but the ones at USC that I did email ended up replying and accepting me :grin:. Also: Some professors will explicitly ask that you &lt;em&gt;not&lt;/em&gt; email them – in this case, I suggest not emailing them.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Choose your recommenders carefully.&lt;/strong&gt; Recommenders must be people who know you well enough that they can write a letter about your ability to do independent research. Ideally, they are professors with whom you have done research. If you have not done research with enough professors, I would suggest getting to know some other professors in your classes by going to their office hours. A quarter/semester of going to a professor’s office hours to ask about class material and grad school advice can end up being enough to write a recommendation. Above all, do not be afraid to ask for a recommendation. Writing recommendations is a regular part of a professor’s job, and if they know you well enough, they will be more than willing to help you.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Ask your recommenders early, and keep them in the loop.&lt;/strong&gt; Give your recommenders as much time as possible to write your recommendations. By June of last year, I had asked two of my recommenders, and by the end of the summer, I had asked my third. As I applied, I kept them updated on my list of grad schools, and I let them know when I had sent out requests for letters (usually, the application system lets you send a letter request to your recommender; the recommender then opens this email and submits the letter).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;The personal statement is the part that you can control.&lt;/strong&gt; Most of your application will already be set by the time you start applying. Your GPA probably will not change much, your GRE scores will be set (unless you want to torture yourself again), your recommenders will write what they want to write, and you will not suddenly gain a plethora of new research experiences. However, the personal statement is something that you can change &lt;em&gt;right now&lt;/em&gt;, so make sure that it is pristine.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Get everyone to review your application.&lt;/strong&gt; This is especially true for the personal statement. Send it to as many people as you can – not just the professors / recommenders you are working with, but also counselors, family members, and (especially) peers. In particular, I found it really helpful to get advice from friends who had just applied to and entered grad school, as well as friends who were currently applying to grad school. As for the other parts of the application, such as the CV, I would recommend sending them to just a few people, as there’s not as much wriggle room in them (i.e. your CV is not going to change much).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Consider if you want to go abroad.&lt;/strong&gt; The advice in this list is tailored to US programs, but you can always consider places like the UK (e.g. &lt;a href=&quot;https://www.ucl.ac.uk&quot;&gt;UCL&lt;/a&gt;), Canada (e.g. &lt;a href=&quot;https://mila.quebec/en/&quot;&gt;MILA&lt;/a&gt;), and Singapore (e.g. &lt;a href=&quot;http://nus.edu.sg&quot;&gt;NUS&lt;/a&gt;). Keep in mind that the processes and programs in other countries may be different. For instance, UK PhD programs tend to be much shorter than US ones. I myself briefly considered going abroad, but decided that immigration would be too much of a hassle.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Apply to fellowships too.&lt;/strong&gt; Fellowships like the &lt;a href=&quot;https://nsfgrfp.org&quot;&gt;NSF GRFP&lt;/a&gt; provide funding to graduate students and look great on your CV. Some schools also have offices dedicated to helping students apply to such awards. For example, UCI has the &lt;a href=&quot;http://scholars.uci.edu&quot;&gt;Scholarship Opportunities Program&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Start early.&lt;/strong&gt; Applying to grad school is a very long and tiring process, and you will need as much time as you can get. Starting early means you have more time to write your essays and get reviews from professors and anyone else helping you. If you’re reading this article a couple months before you would apply, I suppose you’re already on the right track :smiley:.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;The application process does not end with &lt;em&gt;submit&lt;/em&gt;.&lt;/strong&gt; Sorry, but you’re not done when you hit the submit button on your application. Though applications are typically due in mid-December (with some in late November or early January), expect to be contacted for interviews and visits with professors starting in January. Essentially, before choosing to work with you for the next several years, professors will want to know more about you than they can glean from your application. In general, to prepare for these interviews, I would suggest reviewing the professor’s recent work and making sure you can answer questions about everything on your application, especially research experiences. Of course, make sure to ask if there is anything you should prepare when a professor contacts you.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;With that, I hope this list helped clarify some areas of the PhD application process. Good luck, and feel free to leave your thoughts in the comments below! Also, check out these other pieces of advice:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20200705134015/https://pg.ucsd.edu/PhD-application-tips.htm&quot;&gt;A Five-Minute Guide to Ph.D. Program Applications&lt;/a&gt; – a short article from an assistant professor that gives a sense of what’s at stake&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20200514225733/https://grad.illinois.edu/sites/default/files/pdfs/grantwritingadvicefromphilipguo-nsf-ndseg-hertz.pdf&quot;&gt;Advice for applying for graduate science fellowships: NSF, NDSEG, Hertz&lt;/a&gt; – fellowships go hand-in-hand with grad school applications&lt;/li&gt; &lt;/ul&gt;</content><author><name>Bryon Tjanaka</name><email>bryon@btjanaka.net</email></author><category term="Advice"/><category term="Grad-School"/><summary type="html">Having applied to CS PhD programs over the past year or so, I decided to write down a few lessons I learned.</summary></entry><entry><title type="html">Integer Replacement</title><link href="https://btjanaka.net/blog/integer-replacement.html" rel="alternate" type="text/html" title="Integer Replacement"/><published>2020-01-13T11:00:00-08:00</published><updated>2020-01-13T11:00:00-08:00</updated><id>https://btjanaka.net/blog/integer-replacement</id><content type="html" xml:base="https://btjanaka.net/blog/integer-replacement.html">&lt;p&gt;This is a problem I brought along to the WICSxACM Technical Interview Prep workshop on 13 January 2020.&lt;!--excerpt-separator--&gt; It is also available at &lt;a href=&quot;https://bit.ly/integer-replacement&quot;&gt;bit.ly/integer-replacement&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt; &lt;p&gt;Source: &lt;a href=&quot;https://leetcode.com/problems/integer-replacement/&quot;&gt;LeetCode 397&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Given a positive integer \(n\), you can perform the following operations:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;If \(n\) is even, replace \(n\) with \(n/2\)&lt;/li&gt; &lt;li&gt;If \(n\) is odd, replace \(n\) with either \(n + 1\) or \(n - 1\)&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;What is the minimum number of replacements needed for \(n\) to become \(1\)?&lt;/p&gt; &lt;h2 id=&quot;hints&quot;&gt;Hints&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;The initial temptation is to go for a fancy, math-based \(O(1)\) solution, but there are more general approaches that will increase your chances of actually coming up with a solution. What are some other approaches you can think of?&lt;/li&gt; &lt;li&gt;How can you think of the problem as a graph? (For this workshop, I know there have been quite a few other graph problems, so this will be fresh in your mind.)&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt; &lt;p&gt;I have implemented one possible solution to the problem. I chose to use C++ because it is the language I prefer to use in interviews. Python makes things too easy. IMHO interviewers will want to see your implementation skills, and C++ is the way to do that. Of course, this will vary on a case-by-case basis. Some companies mainly use Python and will want to interview you in Python, for instance.&lt;/p&gt; &lt;h3 id=&quot;approach-1-bfs&quot;&gt;Approach 1: BFS&lt;/h3&gt; &lt;p&gt;This solution was suggested in the &lt;a href=&quot;#hints&quot;&gt;Hints&lt;/a&gt;. The idea is to think of the numbers as a graph, where each number is a node and there are edges connecting each node \(x\) to \(x/2\) if \(x\) is even, or to \(x + 1\) and \(x - 1\) if \(x\) is odd. We can then perform a BFS (Breadth-First Search) on the graph to find the length of the shortest path from \(n\) to \(1\).&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Time complexity: \(O(n)\) – we can only encounter numbers in the range \([1, 2n]\) since if you reach \(2n\), you wasted a bunch of steps because \(2n\) can just be divided by \(2\) to get \(n\). Since we never visit the same number twice, the time complexity is \(O(2n) = O(n)\)&lt;/li&gt; &lt;li&gt;Space complexity: \(O(n)\) – same reason as above.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerReplacement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Queue for BFS -- each pair holds a number `x` and the number&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// of steps it is from `n`. we use `long long` to account for the&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// edge case when `n == INT_MAX`. Note that as we pop nodes from&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and add nodes to this queue, the number of steps gradually&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// increases. Furthermore, note that we are guaranteed to visit all nodes&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// that are `k` steps from `n` before any nodes that are `k + 1` steps&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// from `n`.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Visited set -- holds numbers that have already been encountered.&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Numbers enter this set when they are first encountered by the&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// algorithm. We do not want to revisit these numbers because we only&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// care about the minimum number of steps to visit them.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unordered_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The queue starts with `n` at 0 steps, and `n` is visited to begin with.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BFS loop.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Retrieve the next `x` and `steps` from the queue.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// See std::tie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We solved the problem -- return the number of steps.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If x is even, the only node connected to it will be `x/2`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Make sure to record that `x/2` is visited.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Add `x/2` with one more step than `x`.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Same as above, except we now have `x + 1` and `x - 1`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If for some reason no solution was found.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;alternate-approaches&quot;&gt;Alternate Approaches&lt;/h3&gt; &lt;p&gt;If you look at the &lt;a href=&quot;https://leetcode.com/problems/integer-replacement/discuss/&quot;&gt;discussions&lt;/a&gt; on the original LeetCode problem, you will see references to dynamic programming (DP) and recursion. These certainly work too.&lt;/p&gt;</content><author><name>Bryon Tjanaka</name><email>bryon@btjanaka.net</email></author><category term="Algorithms"/><category term="Problems"/><category term="LeetCode"/><summary type="html">This is a problem I brought along to the WICSxACM Technical Interview Prep workshop on 13 January 2020.</summary></entry><entry><title type="html">Website History</title><link href="https://btjanaka.net/blog/website-history.html" rel="alternate" type="text/html" title="Website History"/><published>2019-12-24T16:00:00-08:00</published><updated>2019-12-24T16:00:00-08:00</updated><id>https://btjanaka.net/blog/website-history</id><content type="html" xml:base="https://btjanaka.net/blog/website-history.html">&lt;p&gt;My personal website has gone through several iterations. Here, I will briefly describe the motivation and technologies behind each major version.&lt;!--excerpt-separator--&gt;&lt;/p&gt; &lt;h2 id=&quot;v1---jekyll&quot;&gt;v1 - Jekyll&lt;/h2&gt; &lt;p&gt;Inspired by several friends, I began investigating web development in December 2018. Using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; with a &lt;a href=&quot;https://github.com/TaylanTatli/Moon&quot;&gt;Moon&lt;/a&gt; theme, I eventually built a personal website and hosted it on &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;. Though I thought the website looked good, I hardly knew how it all worked, so I decided to explore further.&lt;/p&gt; &lt;h2 id=&quot;v2---vanilla&quot;&gt;v2 - “Vanilla”&lt;/h2&gt; &lt;p&gt;To better understand basic web technologies, I built a new website from the ground up, using raw/vanilla HTML, CSS, and JavaScript. Eventually, I used &lt;a href=&quot;http://browserify.org&quot;&gt;Browserify&lt;/a&gt; to modularize my JavaScript code. I also used &lt;a href=&quot;https://www.npmjs.com/package/liquidjs&quot;&gt;liquidjs&lt;/a&gt; to essentially build a primitive static site generator, similar to Jekyll. Overall, I learned much about web development from this project. I especially saw how web development is full of an endless, ever-changing list of libraries and tools.&lt;/p&gt; &lt;h2 id=&quot;v3---react&quot;&gt;v3 - React&lt;/h2&gt; &lt;p&gt;To gain more experience with higher-level frameworks, I used &lt;a href=&quot;https://reactjs.org&quot;&gt;React&lt;/a&gt; to build the next version of my website. In the end, though I enjoyed the flexibility React provided, I also found it a bit overkill for a personal website. React is tailored for large, interactive websites, but my personal website was small and static. Furthermore, using pure React on the client-side meant that JavaScript had to be executed before any content was rendered, so search engines had a harder time indexing my content. Some search engines, like Google, did execute the JavaScript and analyze the result, but others, like DuckDuckGo, did not, and so my website did not show up. Hence, I concluded that I should use a static site framework like Jekyll, while plugging in small React components if needed.&lt;/p&gt; &lt;h2 id=&quot;v4---jekyll-again&quot;&gt;v4 - Jekyll (again)&lt;/h2&gt; &lt;p&gt;Thus, I have come full circle and decided to use Jekyll once more, initially with the &lt;a href=&quot;https://github.com/alshedivat/al-folio&quot;&gt;al-folio&lt;/a&gt; theme, and then with the &lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme&quot;&gt;TeXt&lt;/a&gt; theme – with numerous custom tweaks, of course. Furthermore, I have integrated React into this theme, allowing me to add interactive components if need be. Now that I have a better understanding of both how Jekyll works and why it exists, I will be able to better leverage it in the future.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/btjanaka/academic-site&quot; class=&quot;button button--primary button--pill&quot;&gt;&lt;i class=&quot;far fa-file-code&quot;&gt;&lt;/i&gt; Source Code&lt;/a&gt;&lt;/p&gt;</content><author><name>Bryon Tjanaka</name><email>bryon@btjanaka.net</email></author><category term="Website"/><category term="Jekyll"/><category term="React"/><summary type="html">My personal website has gone through several iterations. Here, I will briefly describe the motivation and technologies behind each major version.</summary></entry></feed>